-- マップスクロール基本＋マップ切り替え

local MAP_NUM = 3 -- マップの数

local MAP_SIZE = 32 -- マップチップ一つのドットサイズ

local MAP_WIDTH_MAX = 40 -- マップの最大幅
local MAP_HEIGHT_MAX = 40 -- マップの最大縦長さ

local MOVE_FRAME = 15 -- 移動にかけるフレーム数

-- マップの構造体
-- DxLua: Lua に構造体は無いためテーブルとして返す
function MAPDATA(t)
    t = t or {}
    return {
        -- マップの幅
        Width = t.Width or 0,

        -- マップの高さ
        Height = t.Height or 0,

        -- マップ
        Data = t.Data or {}
    }
end

-- マップのデータ
local MapData =
{
	-- マップ０
	MAPDATA {
		Width = 10,
		Height = 8,
		Data = {
			{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
			{ 0, 1, 0, 0, 0, 1, 1, 1, 1, 0 },
			{ 0, 1, 1, 1, 0, 1, 1, 0, 1, 0 },
			{ 0, 0, 0, 1, 0, 1, 1, 0, 1, 0 },
			{ 0, 0, 0, 1, 0, 0, 1, 0, 1, 0 },
			{ 0, 0, 1, 1, 0, 0, 1, 0, 1, 0 },
			{ 0, 1, 1, 1, 1, 1, 1, 0, 1, 0 },
			{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
		}
	},

	-- マップ１
	MAPDATA {
		Width = 20,
		Height = 16,
		Data = {
			{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
			{ 0, 1, 1, 0, 0, 0, 0, 0, 0, 0,  1, 1, 1, 1, 1, 1, 1, 1, 1, 0 },
			{ 0, 0, 1, 1, 1, 0, 0, 0, 0, 0,  1, 0, 0, 0, 0, 0, 0, 0, 1, 0 },
			{ 0, 0, 1, 0, 1, 0, 0, 0, 0, 0,  1, 1, 1, 1, 1, 1, 0, 0, 1, 0 },
			{ 0, 1, 1, 0, 1, 0, 0, 1, 1, 0,  0, 0, 0, 0, 0, 1, 0, 0, 1, 0 },
			{ 0, 1, 0, 0, 1, 0, 0, 1, 1, 0,  0, 0, 1, 1, 1, 1, 1, 0, 1, 0 },
			{ 0, 1, 0, 0, 1, 0, 0, 1, 1, 0,  0, 0, 1, 0, 0, 1, 1, 0, 1, 0 },
			{ 0, 1, 0, 0, 1, 0, 0, 1, 1, 0,  0, 0, 1, 0, 0, 1, 1, 0, 1, 0 },

			{ 0, 1, 1, 1, 1, 1, 1, 1, 1, 0,  0, 1, 1, 0, 0, 1, 1, 0, 1, 0 },
			{ 0, 0, 0, 0, 1, 0, 0, 1, 0, 0,  0, 1, 1, 0, 0, 1, 1, 0, 1, 0 },
			{ 0, 0, 0, 0, 1, 0, 0, 1, 0, 0,  0, 1, 1, 0, 0, 1, 1, 0, 1, 0 },
			{ 0, 0, 0, 1, 1, 0, 0, 1, 0, 0,  0, 1, 1, 0, 0, 1, 1, 0, 1, 0 },
			{ 0, 1, 1, 1, 1, 0, 0, 1, 1, 1,  1, 1, 1, 0, 0, 1, 1, 0, 1, 0 },
			{ 0, 1, 1, 1, 1, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 1, 0 },
			{ 0, 1, 1, 1, 1, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 1, 0 },
			{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
		}
	},

	-- マップ２
	MAPDATA {
		Width = 40,
		Height = 32,
		Data = {
			{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
			{ 0, 1, 1, 1, 1, 1, 0, 0, 0, 0,  0, 1, 1, 1, 1, 1, 1, 0, 0, 0,  1, 1, 1, 1, 1, 1, 1, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
			{ 0, 1, 1, 1, 1, 1, 0, 0, 0, 0,  0, 1, 1, 1, 1, 1, 1, 0, 0, 0,  1, 0, 0, 0, 1, 1, 1, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
			{ 0, 1, 1, 1, 1, 1, 0, 0, 0, 0,  0, 1, 1, 1, 1, 1, 1, 0, 0, 0,  1, 0, 0, 0, 1, 1, 1, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
			{ 0, 1, 1, 1, 1, 1, 0, 0, 0, 0,  0, 1, 1, 1, 1, 1, 1, 0, 0, 0,  1, 0, 0, 0, 1, 1, 1, 1, 1, 1,  1, 1, 1, 1, 1, 1, 1, 1, 0, 0 },
			{ 0, 1, 1, 1, 1, 1, 0, 0, 0, 0,  0, 1, 1, 1, 1, 1, 1, 0, 0, 0,  1, 0, 0, 0, 1, 1, 1, 0, 0, 0,  0, 0, 0, 1, 0, 0, 0, 1, 0, 0 },
			{ 0, 0, 1, 1, 0, 0, 0, 0, 0, 0,  0, 1, 1, 1, 1, 1, 1, 1, 1, 1,  1, 0, 0, 0, 1, 1, 1, 0, 0, 0,  1, 1, 1, 1, 0, 0, 0, 1, 0, 0 },
			{ 0, 0, 1, 1, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 1, 0, 0, 0, 0,  0, 0, 0, 0, 1, 1, 1, 0, 0, 0,  1, 0, 0, 0, 0, 1, 1, 1, 0, 0 },

			{ 0, 0, 1, 1, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 1, 0, 0, 0, 0,  0, 0, 0, 0, 1, 1, 1, 0, 0, 0,  1, 0, 1, 0, 1, 1, 0, 0, 0, 0 },
			{ 0, 1, 1, 1, 1, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 1, 0, 0, 0, 0,  0, 0, 0, 0, 1, 1, 1, 0, 0, 0,  1, 0, 1, 0, 1, 0, 0, 1, 1, 0 },
			{ 0, 1, 1, 1, 1, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 1, 0, 0, 0, 0,  0, 0, 0, 0, 1, 1, 1, 0, 0, 0,  1, 0, 1, 0, 1, 0, 1, 1, 0, 0 },
			{ 0, 1, 1, 1, 1, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 1, 1, 1, 0, 0,  0, 0, 0, 0, 1, 1, 1, 0, 0, 0,  1, 0, 1, 0, 1, 1, 1, 0, 0, 0 },
			{ 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 1, 1, 1, 0, 0,  0, 0, 0, 0, 1, 1, 1, 0, 0, 0,  1, 1, 1, 0, 1, 0, 0, 1, 1, 0 },
			{ 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 1, 1, 1, 0, 0,  0, 0, 0, 0, 1, 1, 1, 0, 0, 0,  0, 0, 0, 0, 1, 0, 0, 1, 1, 0 },
			{ 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 1, 1, 1, 0, 0, 1,  1, 1, 1, 1, 1, 0, 0, 1, 1, 0 },
			{ 0, 0, 1, 1, 1, 1, 1, 1, 1, 1,  1, 1, 1, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 1, 1, 1, 0, 0, 1,  0, 0, 0, 1, 0, 1, 1, 1, 1, 0 },

			{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 1, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 1, 1, 1, 0, 0, 1,  1, 1, 0, 1, 0, 1, 0, 0, 0, 0 },
			{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 1, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 1, 1, 1, 0, 0, 1,  1, 1, 0, 1, 0, 1, 0, 1, 1, 0 },
			{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 1, 1, 1, 1, 1, 0, 0, 0,  0, 0, 0, 0, 1, 1, 1, 0, 0, 0,  0, 1, 0, 1, 1, 1, 0, 1, 1, 0 },
			{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 1, 0, 0, 0, 1, 0, 0, 0,  0, 0, 0, 0, 1, 1, 1, 0, 1, 1,  1, 1, 0, 0, 0, 0, 1, 1, 1, 0 },
			{ 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,  1, 1, 1, 0, 0, 0, 1, 0, 0, 0,  0, 0, 0, 0, 1, 1, 1, 0, 1, 0,  0, 0, 0, 0, 0, 1, 1, 0, 1, 0 },
			{ 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 1, 0, 0, 0,  0, 0, 0, 0, 1, 1, 1, 0, 1, 1,  1, 1, 1, 1, 1, 1, 0, 0, 1, 0 },
			{ 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 1, 1, 0, 0, 0,  0, 0, 0, 0, 1, 1, 1, 0, 1, 0,  0, 0, 0, 0, 0, 0, 0, 0, 1, 0 },
			{ 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 1, 0, 0, 0, 0,  0, 0, 0, 0, 1, 1, 1, 0, 1, 1,  1, 1, 1, 1, 1, 1, 1, 0, 1, 0 },

			{ 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 1, 0, 0, 0, 0,  0, 0, 0, 0, 1, 1, 1, 0, 0, 0,  0, 0, 0, 0, 0, 0, 1, 0, 1, 0 },
			{ 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 1, 0, 0, 0, 0,  0, 0, 0, 0, 1, 1, 1, 0, 1, 1,  1, 1, 1, 1, 1, 1, 1, 0, 1, 0 },
			{ 0, 1, 1, 1, 1, 1, 1, 0, 0, 0,  0, 1, 1, 1, 1, 1, 1, 1, 1, 0,  0, 1, 1, 1, 1, 1, 1, 0, 0, 0,  0, 0, 0, 0, 0, 1, 1, 0, 1, 0 },
			{ 0, 1, 1, 1, 1, 1, 1, 0, 0, 0,  0, 1, 0, 0, 0, 1, 0, 0, 1, 0,  0, 1, 1, 1, 1, 1, 1, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 1, 0 },
			{ 0, 1, 1, 0, 0, 1, 1, 0, 0, 0,  0, 1, 0, 0, 0, 1, 0, 0, 1, 0,  0, 1, 1, 1, 1, 0, 0, 0, 0, 0,  1, 1, 1, 1, 1, 1, 1, 1, 1, 0 },
			{ 0, 1, 1, 1, 1, 1, 1, 0, 0, 0,  0, 1, 0, 0, 0, 1, 0, 0, 1, 0,  0, 1, 0, 0, 0, 0, 0, 0, 0, 0,  1, 1, 1, 1, 1, 1, 1, 1, 1, 0 },
			{ 0, 1, 1, 1, 1, 1, 1, 0, 0, 0,  0, 1, 1, 1, 1, 1, 0, 0, 1, 1,  1, 1, 0, 0, 0, 0, 0, 0, 0, 0,  1, 1, 1, 1, 1, 1, 1, 1, 1, 0 },
			{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
		}
	},
}

-- 現在のマップ番号
local MapNo = 1

-- プレイヤーの位置
local PlayerX, PlayerY = 0, 0

-- 移動しているかどうかのフラグ( 0:停止中  1:移動中 )
local Move = 0

-- 各方向に移動する量
local MoveX, MoveY = 0, 0

-- 移動し始めてから何フレーム経過したかを保持する変数
local MoveCounter = 0

local Key = 0
local ScrollX, ScrollY = 0, 0

-- 画面モードのセット
dx.SetGraphMode(640, 480, 16)

-- ＤＸライブラリ初期化処理
function dx.Init()
	-- 描画先画面を裏画面にする
	dx.SetDrawScreen(dx.DX_SCREEN_BACK)

	-- プレイヤーの初期位置をセット
	PlayerX = 1
	PlayerY = 1

	-- 最初は停止中(0)にしておく
	Move = 0
end

-- ループ
function dx.Update()
    if dx.CheckHitKey(dx.KEY_INPUT_ESCAPE) ~= 0 then
        return 'exit'
    end

    -- 画面を初期化
    dx.ClearDrawScreen()

    -- スペースキーが押されたらマップ番号を切り変える
    if dx.GetInputChar(true) == string.byte(' ') then
        -- プレイヤーの位置を初期化
        PlayerX = 1
        PlayerY = 1

        -- 停止中フラグも倒す
        Move = 0

        -- マップ番号を加算
        MapNo = MapNo + 1
        if MapNo > MAP_NUM then
            MapNo = 1
        end
    end

    -- 移動中ではない場合キー入力を受け付ける
    if Move == 0 then
        -- キー入力を得る
        Key = dx.GetJoypadInputState(dx.DX_INPUT_KEY_PAD1)

        -- キー入力に応じてプレイヤーの座標を移動
        if bit.band(Key, dx.PAD_INPUT_LEFT) ~= 0 then
            Move = 1
            MoveX = -1
            MoveY = 0
        end
        if bit.band(Key, dx.PAD_INPUT_RIGHT) ~= 0 then
            Move = 1
            MoveX = 1
            MoveY = 0
        end
        if bit.band(Key, dx.PAD_INPUT_UP) ~= 0 then
            Move = 1
            MoveX = 0
            MoveY = -1
        end
        if bit.band(Key, dx.PAD_INPUT_DOWN) ~= 0 then
            Move = 1
            MoveX = 0
            MoveY = 1
        end

        -- 進入不可能なマップだった場合は移動できない
        if Move == 1 then
            if MapData[MapNo].Data[PlayerY + MoveY + 1][PlayerX + MoveX + 1] == 0 then
                Move = 0
            else
                MoveCounter = 0
            end
        end

        -- 停止中は画面のスクロールは行わない
        ScrollX = 0
        ScrollY = 0
    end

    -- 移動中の場合は移動処理を行う
    if Move == 1 then
        MoveCounter = MoveCounter + 1

        -- 移動処理が終了したら停止中にする
        if MoveCounter == MOVE_FRAME then
            Move = 0

            -- プレイヤーの位置を変更する
            PlayerX = PlayerX + MoveX
            PlayerY = PlayerY + MoveY

            -- 停止中は画面のスクロールは行わない
            ScrollX = 0
            ScrollY = 0
        else
            -- 経過時間からスクロール量を算出する
            ScrollX = -(MoveX * MAP_SIZE * MoveCounter / MOVE_FRAME)
            ScrollY = -(MoveY * MAP_SIZE * MoveCounter / MOVE_FRAME)
        end
    end

    -- マップとプレイヤーを描画
    GraphDraw(ScrollX, ScrollY)

    -- 裏画面の内容を表画面に映す
    dx.ScreenFlip()
end

-- マップとプレイヤーの描画関数
function GraphDraw(ScrollX, ScrollY)
	local MapDrawPointX, MapDrawPointY     -- 描画するマップ座標値
	local DrawMapChipNumX, DrawMapChipNumY -- 描画するマップチップの数

	-- 描画するマップチップの数をセット
	DrawMapChipNumX = math.floor(640 / MAP_SIZE) + 2
	DrawMapChipNumY = math.floor(480 / MAP_SIZE) + 2

	-- 画面左上に描画するマップ座標をセット
	MapDrawPointX = PlayerX - (math.floor(DrawMapChipNumX / 2) - 1)
	MapDrawPointY = PlayerY - (math.floor(DrawMapChipNumY / 2) - 1)

	-- マップを描く
	for i = -1, DrawMapChipNumY - 1 do
		for j = -1, DrawMapChipNumX - 1 do
			-- 画面からはみ出た位置なら描画しない
			if j + MapDrawPointX < 0 or i + MapDrawPointY < 0 or
                j + MapDrawPointX >= MapData[MapNo].Width or i + MapDrawPointY >= MapData[MapNo].Height then
                -- DxLua: Lua に continue は無い
            elseif MapData[MapNo].Data[i + MapDrawPointY + 1][j + MapDrawPointX + 1] == 0 then
			    -- マップデータが０だったら四角を描画する
				dx.DrawBox(j * MAP_SIZE + ScrollX, i * MAP_SIZE + ScrollY,
					j * MAP_SIZE + MAP_SIZE + ScrollX, i * MAP_SIZE + MAP_SIZE + ScrollY,
					dx.GetColor(255, 0, 0), true)
			end
		end
	end

	-- プレイヤーの描画
	dx.DrawBox((PlayerX - MapDrawPointX) * MAP_SIZE, (PlayerY - MapDrawPointY) * MAP_SIZE,
		(PlayerX - MapDrawPointX + 1) * MAP_SIZE, (PlayerY - MapDrawPointY + 1) * MAP_SIZE,
		dx.GetColor(255, 255, 255), true)
end
